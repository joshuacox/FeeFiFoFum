#!/bin/bash

helper () {
  echo 'Give me a path to a targetfile, that I can create and use to test with.'
  echo 'This file should not exist, but this should be a path I can write to'
  echo 'e.g.'
  echo "$0 /mnt/target/testfile" 
}

if [ $# -lt 1 ]; then
  # Print usage
  echo -n 'Error! wrong number of arguments'
  echo " [$#]"
  helper
  exit 1
fi

# Set some defaults
# If already defined in the environment 
# then it will retain that value 
# instead of the default set below
: ${FIO_OUTPUT_FORMAT:='json'}
: ${DEBUG:=0}
#set -eux
set -eu
THIS_CWD=$(pwd)
TMP=$(mktemp -d)

if [[ $DEBUG -eq 1 ]]; then
  # We're in debug mode so announce tmp directory now and upon exit
  echo "$TMP"
  trap "debug_trapper" EXIT
else
  # Otherwise we clean up after ourselves upon exit
  trap "rm -rvf $TMP" EXIT
fi

# prep the temp dir
echo '# Taken from https://github.com/stedolan/jq/wiki/Cookbook#convert-a-csv-file-with-headers-to-json
# COPYING --> https://github.com/stedolan/jq/blob/master/COPYING
# objectify/1 takes an array of string values as inputs, converts
# numeric values to numbers, and packages the results into an object
# with keys specified by the "headers" array
def objectify(headers):
  # For jq 1.4, replace the following line by: def tonumberq: .;
  def tonumberq: tonumber? // .;
  . as $in
  | reduce range(0; headers|length) as $i ({}; .[headers[$i]] = ($in[$i] | tonumberq) );

def csv2table:
  # For jq 1.4, replace the following line by:  def trim: .;
  def trim: sub("^ +";"") |  sub(" +$";"");
  split("\n") | map( split(",") | map(trim) );

def csv2json:
  csv2table
  | .[0] as $headers
  | reduce (.[1:][] | select(length > 0) ) as $row
      ( []; . + [ $row|objectify($headers) ]);

csv2json' > $TMP/csv2json.jq 

# Start of merge js
cat << EOF > $TMP/merge.js
'use strict';
const fs = require('fs');
let rawdata = fs.readFileSync('${TMP}/base.json');
let base = JSON.parse(rawdata);
EOF

horizontal_rule () {
  # make a horizontal rule in the terminal to separate blocks of text
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "_"
}

if [[ $DEBUG -eq 1 ]]; then
  horizontal_rule
fi

debug_trapper () {
  horizontal_rule
  echo "debugging $TMP"
}

rm_target () {
  RM_TARGET=$1
  if [[ -f $RM_TARGET ]]; then
    rm -f $RM_TARGET
  else
    echo "$RM_TARGET is not a file, bailing out!"
    exit 1
  fi
}

initializer () {
  if [[ -z $1 ]]; then
    echo 'no INIT_TARGET :('
    exit 1
  else
    INIT_TARGET=$1
  fi
  if [[ -f $INIT_TARGET ]]; then
    echo "target already present bailing out"
    exit 1
  else
    touch $INIT_TARGET
  fi
}

df_json () {
	df -Ph | \
		jq -R -s '
			[
				split("\n") |
				.[] |
				if test("^/") then
					gsub(" +"; " ") | split(" ") | {filesytem: .[0], totalSpace: .[1], usedSpace: .[2], availableSpace: .[3], percentUsed: .[4], mount: .[5]}
				else
					empty
				end
			]'|sed 's/\]/],/' 
}

chomp () {
  tr -d '\n'
}

base_tests () {
  if [[ -z $1 ]]; then
    echo 'no BASE_TARGET :('
    exit 1
  else
    BASE_TARGET=$1
  fi
  if [[ $DEBUG -eq 1 ]]; then
    echo "First fire 32 million zeros at $BASE_TARGET"
  fi
  printf '{\n' 1>>$TMP/base.json 2>>$TMP/base.err 
  # hostname
  printf '  "hostname" : "' 1>>$TMP/base.json
  hostname | chomp 1>>$TMP/base.json 2>>$TMP/base.err 
  printf '",\n' 1>>$TMP/base.json
  # date
  printf '  "date" : "' 1>>$TMP/base.json
  date +%Y-%m-%d-%H-%M-%S | chomp  1>>$TMP/base.json 2>>$TMP/base.err 
  printf '",\n' 1>>$TMP/base.json
  printf '  "timestamp" : "' 1>>$TMP/base.json
  date +%s | chomp  1>>$TMP/base.json 2>>$TMP/base.err 
  printf '",\n' 1>>$TMP/base.json
  # uname
  printf '  "uname" : "' 1>>$TMP/base.json
  uname -a | chomp  1>>$TMP/base.json 2>>$TMP/base.err 
  printf '",\n' 1>>$TMP/base.json
  # df
  printf '  "df" : ' 1>>$TMP/base.json
  df_json 1>>$TMP/base.json 2>>$TMP/base.err 
  printf '\n' 1>>$TMP/base.json
  # dd32M
  printf '  "dd32M" : ' 1>>$TMP/base.json
  echo 'bytes,time,rate' > $TMP/dd32M.csv
  sudo dd if=/dev/zero of=$BASE_TARGET bs=32M count=1 2>$TMP/dd32M.tmp 1>$TMP/dd32M.log
  #cat $TMP/dd32M.tmp $TMP/dd32M.log|grep bytes|sed 's/bytes .* copied,/,/' >>  $TMP/dd32M.csv
  cat $TMP/dd32M.tmp|grep bytes|sed 's/bytes .* copied,/,/' >>  $TMP/dd32M.csv
  jq -R -s -f $TMP/csv2json.jq $TMP/dd32M.csv |chomp 1>>$TMP/base.json 2>>$TMP/base.err 
  printf ',\n' 1>>$TMP/base.json
  # ip --json a
  printf '  "ipAddrShow" : ' 1>>$TMP/base.json
  ip --json addr show 1>>$TMP/base.json 2>>$TMP/base.err
  printf ',\n' 1>>$TMP/base.json
  # ip --json route show
  printf '  "ipRouteShow" : ' 1>>$TMP/base.json
  ip --json route show 1>>$TMP/base.json 2>>$TMP/base.err
  printf '\n' 1>>$TMP/base.json


  # End base.json
  printf '}\n' 1>>$TMP/base.json 2>>$TMP/base.err 
  rm_target $BASE_TARGET
}

sender () {
  SENDTARGET=$1
  cat $SENDTARGET
}

fioer () {
  if [[ -z $1 ]]; then
    echo 'no THIS :('
    exit 1
  else
    THIS=$1
    shift;
  fi
  if [[ -z $1 ]]; then
    echo 'no THIS_TARGET :('
    exit 1
  else
    THIS_TARGET=$1
    shift;
  fi
  #echo "Starting $THIS on $THIS_TARGET"
  FIOTMP=$TMP/fiotmp-$THIS
  mkdir -p $FIOTMP

  REPLACEME_filename_REPLACEME=${THIS_TARGET} \
  envsubst < tpl/${THIS}.tpl \
    > $FIOTMP/${THIS}.fio
  sudo fio \
    --output=$FIOTMP/${THIS}_output.json \
    --output-format=$FIO_OUTPUT_FORMAT \
    $FIOTMP/${THIS}.fio
  #sender $FIOTMP/${THIS}_output.json
  sed -i 's/fio: double CPU clock wrap//' $FIOTMP/${THIS}_output.json
  mv -v $FIOTMP/${THIS}_output.json $TMP/

# break WS
# to add lines to merge js
cat << EOF >> ${TMP}/merge.js
let ${THIS} = fs.readFileSync('${TMP}/${THIS}_output.json');
base.${THIS} = JSON.parse(${THIS});
EOF
# END break WS

  #sudo rm -v $FIOTMP/${THIS}_output.json
  if [[ ! $DEBUG -eq 1 ]]; then
  rm -v $FIOTMP/${THIS}.fio
  #rm -Rfv $FIOTMP
  rmdir -v $FIOTMP
  fi
}

main () {
  if [[ -z $1 ]]; then
    echo 'no MAIN_TARGET :('
    exit 1
  else
    MAIN_TARGET=$1
  fi
  if [[ $DEBUG -eq 1 ]]; then
    echo "Initializer"
  fi
  initializer $MAIN_TARGET 1>$TMP/init.log 2>$TMP/init.err 
  if [[ $DEBUG -eq 1 ]]; then
    echo "Base Tests"
  fi
  base_tests $MAIN_TARGET
  if [[ $DEBUG -eq 1 ]]; then
    echo "fio reads"
  fi
  fioer fiorandomreadlatency $MAIN_TARGET 1>$TMP/fiorandomreadlatency.log 2>$TMP/fiorandomreadlatency.err 
  if [[ $DEBUG -eq 1 ]]; then
    echo "fio rw"
  fi
  fioer fiorandomrwlatency $MAIN_TARGET 1>$TMP/fiorandomrwlatency.log 2>$TMP/fiorandomrwlatency.err 
  rm_target $MAIN_TARGET

  # This one eats part of the tree
  #jq -n '[ inputs[] ]' $TMP/*.json  > $TMP/final.json
  cd $TMP
  # merge the json files into one

# break WS
# to close merge js file
cat << EOF >> $TMP/merge.js
let data = JSON.stringify(base);
fs.writeFileSync('${TMP}/final.json', data);
EOF
# END break WS

  node merge.js
  cd $THIS_CWD
  if [[ $DEBUG -eq 1 ]]; then
    jq . $TMP/final.json
  fi
}

looper () {
for item in "$@" ; do
    #process item

  if [[ -z $item ]]; then
    echo 'no target :('
    helper
    exit 1
  elif [[ $item == 'help' || $item == '-h' || $item == '--help' ]]; then
    helper
    exit 1
  else
    touch $item
    if [[ $? -eq '0' ]]; then
      rm $item
    else
      echo "Failed cannot create $item"
      exit 1
    fi
  fi
  if [[ $item == '/' ]]; then
    echo 'Do not target root!'
    exit 1
  else
    shift;
    main $item
  fi
done
}

looper $@
